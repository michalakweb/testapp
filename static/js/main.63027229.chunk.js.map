{"version":3,"sources":["components/Header.js","components/Option.js","components/Options.js","components/SelectOption.js","components/DeleteAll.js","components/AddOption.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Option","props","Row","Col","xs","lg","optionText","Button","variant","onClick","handleDeleteOne","Options","options","map","option","index","components_Option","key","SelectOption","size","block","disabled","optionsAvailable","length","handleRandom","DeleteAll","handleDeleteAll","AddOption","handleAddOption","e","preventDefault","newOption","target","elements","value","trim","focus","_this","Form","onSubmit","this","noGutters","Control","type","name","placeholder","sm","Component","App","state","selectedOption","error","randomIndex","Math","floor","random","setState","prevState","filter","includes","concat","Object","toConsumableArray","json","localStorage","getItem","JSON","parse","stringify","setItem","Container","components_Header","components_SelectOption","components_DeleteAll","Alert","components_Options","components_AddOption","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63027229.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n    <div>\r\n        <h1 className='display-4'>Choice Selector</h1>\r\n        <blockquote className=\"blockquote text-left\">\r\n            <p className=\"mb-0\">\"For the undecided average Joe\"</p>\r\n        </blockquote>\r\n        <p className='text-center mb-0'>_______</p>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport {Button, Row, Col} from 'react-bootstrap';\r\n\r\nconst Option = (props) => (\r\n    <div>\r\n        <Row className='py-3 pl-2 text-white'>\r\n            <Col xs={9} lg={10}><p>{props.optionText}</p></Col>\r\n            <Col xs={3} lg={2}><Button variant=\"outline-light\" className='button--deleteOption' onClick={() => {\r\n                return props.handleDeleteOne(props.optionText)\r\n            }}>Delete</Button></Col>\r\n        </Row>\r\n    </div>\r\n)\r\n\r\nexport default Option;","import React from 'react';\r\nimport Option from './Option';\r\n\r\nconst Options = (props) => (\r\n    <div>\r\n        {\r\n            props.options.map((option, index) => \r\n            <Option key={index} optionText={option} handleDeleteOne={props.handleDeleteOne} />)\r\n        }\r\n    </div>\r\n)\r\n\r\nexport default Options;","import React from 'react';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nconst SelectOption = (props) => {\r\n    return (\r\n        <div>\r\n            <Button variant=\"primary\" size=\"lg\" block\r\n                disabled={props.optionsAvailable.length > 0 ? false : true} \r\n                onClick={props.handleRandom}\r\n                className='my-1'\r\n            >Make a choice for me</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default SelectOption;","import React from 'react';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nconst DeleteAll = (props) => (\r\n    <div>\r\n        <Button \r\n        variant=\"danger\" size=\"lg\" block\r\n        className='my-1'\r\n        onClick={props.handleDeleteAll}>Delete All</Button>\r\n    </div>\r\n);\r\n\r\nexport default DeleteAll;","import React, { Component } from 'react';\r\nimport { Form, Button, Row, Col } from 'react-bootstrap';\r\n\r\nclass AddOption extends Component {\r\n    handleAddOption = (e) => {\r\n        e.preventDefault();\r\n        let newOption = e.target.elements.option.value.trim();\r\n        e.target.elements.option.value = '';\r\n        e.target.elements.option.focus();\r\n        this.props.handleAddOption(newOption);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form onSubmit={this.handleAddOption}>\r\n                    <Row noGutters={true}>\r\n                        <Col className='my-1'>\r\n                            <Form.Control type=\"text\" name='option' placeholder=\"Type your option here\"/>\r\n                        </Col>\r\n                        <Col sm={3} className='my-1'>\r\n                            <Button type='submit' block>Add Option</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }     \r\n} \r\n\r\nexport default AddOption;","import React, { Component } from 'react';\n\n// CSS\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Row, Container, Col, Alert } from 'react-bootstrap';\nimport './App.scss';\n\n//Components\nimport Header from './components/Header';\nimport Options from './components/Options';\nimport SelectOption from './components/SelectOption';\nimport DeleteAll from './components/DeleteAll';\nimport AddOption from './components/AddOption';\n\nclass App extends Component {\n  state = {\n    selectedOption: '',\n    options: [],\n    error: ''\n  }\n\n  // Methods\n\n  handleRandom = () => {\n    let randomIndex = Math.floor(Math.random() * this.state.options.length);\n    this.setState(() => ({\n      selectedOption: this.state.options[randomIndex]\n    }));\n  };\n  \n  handleDeleteAll = () => {\n    this.setState(() => {\n      return {\n        options: []\n      };\n    });\n  };\n\n  handleDeleteOne = (optionText) => {\n    this.setState((prevState) => ({\n      options: prevState.options.filter(option => option !== optionText)\n    }));\n  }\n\n  handleAddOption = (newOption) => {\n    if(typeof newOption !== \"string\" || newOption === '' || newOption.length > 120) {\n      this.setState(() => ({\n        error: 'Invalid type of submission. Try again.'\n      }));\n    }\n\n    else if(this.state.options.includes(newOption)) {\n      this.setState(() => ({\n        error: 'This option already exists. Try again.'\n      }));\n    }\n\n    else {\n      this.setState((prevState) => ({\n        error: '',\n        options: [...prevState.options, newOption]\n      }));\n    }\n    \n  }\n\n  // Lifecycle\n\n  componentDidMount() {\n    try {\n        const json = localStorage.getItem('options');\n        const options = JSON.parse(json);\n\n        if(options) {\n         this.setState(() => ({ options }));\n        }\n    }\n\n    catch (e) {\n        //Do nothing\n    } \n}\n\n  componentDidUpdate() {\n    const options = JSON.stringify(this.state.options);\n    localStorage.setItem('options', options);\n  }\n\n\n  // Render\n\n  render() {\n    return (\n      <div className=\"App py-5\">\n        <Container className='container py-3 text-white'>\n          <Header/>\n          <Row className='my-3'>\n            <Col sm={8}>\n              <SelectOption \n              handleRandom={this.handleRandom} \n              optionsAvailable={this.state.options}\n              selectedOption={this.state.selectedOption}\n              />\n            </Col>\n            <Col>\n              <DeleteAll handleDeleteAll={this.handleDeleteAll} />\n            </Col>\n          </Row>\n          {this.state.selectedOption !== '' && \n          <Alert variant='success' className='mt-2 mb-4'>\n              Well, it seems  that you should go with \"{this.state.selectedOption}\"\n          </Alert>\n          }\n          <Container className='container container--options py-3'>\n              <Options \n              options={this.state.options}\n              handleDeleteOne={this.handleDeleteOne} \n              />\n              <AddOption handleAddOption={this.handleAddOption}/>\n              {/* Error handling */}\n              {this.state.error.length !== 0 && <p className='mt-3 mb-2'>{this.state.error}</p>}\n          </Container>\n        </Container>\n        \n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}